// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generate Graphql queries And mutations for Frontend Should back User model graphql with custom exclude 1`] = `
{
  "User": "fragment UserFields on User {
  id
  createdAt
  email
  name
  permissions
}

fragment User on User {
  ...UserFields
}

query findUniqueUser($where: UserWhereUniqueInput!) {
  findUniqueUser(where: $where) {
    ...User
  }
}

query findManyUser(
  $where: UserWhereInput
  $orderBy: [UserOrderByWithRelationInput!]
  $cursor: UserWhereUniqueInput
  $skip: Int
  $take: Int
) {
  findManyUser(where: $where, orderBy: $orderBy, cursor: $cursor, skip: $skip, take: $take) {
    ...User
  }
}

mutation updateOneUser($where: UserWhereUniqueInput!, $data: UserUpdateInput!) {
  updateOneUser(where: $where, data: $data) {
    ...User
  }
}

mutation deleteOneUser($where: UserWhereUniqueInput!) {
  deleteOneUser(where: $where) {
    ...User
  }
}

mutation deleteManyUser($where: UserWhereInput) {
  deleteManyUser(where: $where) {
    count
  }
}
",
}
`;

exports[`Generate Graphql queries And mutations for Frontend Should back with all models 1`] = `
{
  "Post": "fragment PostFields on Post {
  id
  published
  title
  authorId
  createdAt
  updatedAt
}

fragment Post on Post {
  ...PostFields
  author {
    ...UserFields
  }
}

query findUniquePost($where: PostWhereUniqueInput!) {
  findUniquePost(where: $where) {
    ...Post
  }
}

query findManyPost(
  $where: PostWhereInput
  $orderBy: [PostOrderByWithRelationInput!]
  $cursor: PostWhereUniqueInput
  $skip: Int
  $take: Int
) {
  findManyPost(where: $where, orderBy: $orderBy, cursor: $cursor, skip: $skip, take: $take) {
    ...Post
  }
}

query findManyPostCount(
  $where: PostWhereInput
  $orderBy: [PostOrderByWithRelationInput!]
  $cursor: PostWhereUniqueInput
  $skip: Int
  $take: Int
) {
  findManyPostCount(where: $where, orderBy: $orderBy, cursor: $cursor, skip: $skip, take: $take)
}

mutation createOnePost($data: PostCreateInput!) {
  createOnePost(data: $data) {
    ...Post
  }
}

mutation updateOnePost($where: PostWhereUniqueInput!, $data: PostUpdateInput!) {
  updateOnePost(where: $where, data: $data) {
    ...Post
  }
}

mutation deleteOnePost($where: PostWhereUniqueInput!) {
  deleteOnePost(where: $where) {
    ...Post
  }
}

mutation deleteManyPost($where: PostWhereInput) {
  deleteManyPost(where: $where) {
    count
  }
}

mutation updateManyPost($where: PostWhereInput, $data: PostUpdateManyMutationInput!) {
  updateManyPost(where: $where, data: $data) {
    count
  }
}
",
  "User": "fragment UserFields on User {
  id
  createdAt
  email
  name
  password
  permissions
}

fragment User on User {
  ...UserFields
}

query findUniqueUser($where: UserWhereUniqueInput!) {
  findUniqueUser(where: $where) {
    ...User
  }
}

query findManyUser(
  $where: UserWhereInput
  $orderBy: [UserOrderByWithRelationInput!]
  $cursor: UserWhereUniqueInput
  $skip: Int
  $take: Int
) {
  findManyUser(where: $where, orderBy: $orderBy, cursor: $cursor, skip: $skip, take: $take) {
    ...User
  }
}

query findManyUserCount(
  $where: UserWhereInput
  $orderBy: [UserOrderByWithRelationInput!]
  $cursor: UserWhereUniqueInput
  $skip: Int
  $take: Int
) {
  findManyUserCount(where: $where, orderBy: $orderBy, cursor: $cursor, skip: $skip, take: $take)
}

mutation createOneUser($data: UserCreateInput!) {
  createOneUser(data: $data) {
    ...User
  }
}

mutation updateOneUser($where: UserWhereUniqueInput!, $data: UserUpdateInput!) {
  updateOneUser(where: $where, data: $data) {
    ...User
  }
}

mutation deleteOneUser($where: UserWhereUniqueInput!) {
  deleteOneUser(where: $where) {
    ...User
  }
}

mutation deleteManyUser($where: UserWhereInput) {
  deleteManyUser(where: $where) {
    count
  }
}

mutation updateManyUser($where: UserWhereInput, $data: UserUpdateManyMutationInput!) {
  updateManyUser(where: $where, data: $data) {
    count
  }
}
",
}
`;
