import { DMMF } from '@paljs/types';

export interface Settings {
  /*
   * We will pass these options to `PrismaSelect` plugin.
   * */
  prismaSelectOptions?: {
    /*
     * you can pass object with your models and what the fields you need to include for every model even if user not requested in GraphQL query.
     * @example
     * const defaultFields = {
     *    User: { id: true, name: true },
     *    Type: { id: true, descriptionRaw: true },
     *    Post: { id: true, body: true },
     *    // as function you can check if client select some fields to add another to default fields
     *    Account: (select) => select.name ? {firstname: true, lastname: true} : {}
     * }
     * */
    defaultFields?: {
      [key: string]: { [key: string]: boolean } | ((select: any) => { [key: string]: boolean });
    };
    /*
     * array of dmmf object import from generated prisma client default
     * @example
     * import {Prisma} from './customPath';
     * import {Prisma as Prisma2} from './customPath2';
     * {
     *  dmmf: [Prisma.dmmf, Prisma2.dmmf]
     * }
     * */
    dmmf?: Omit<DMMF.Document, 'schema'>[];
  };
  /*
   * If you want to use Prisma Admin table generated by `@paljs/admin` package
   * You will need to add Queries and Mutation to get and update the tables settings
   * @default false
   */
  includeAdmin?: boolean;
  /*
   * This is the path to the generated `adminSettings.json` file.
   * @default 'adminSettings.json'
   */
  adminSchemaPath?: string;
  /*
   * To exclude any default scalar please add this option with an array
   * @example
   * {
   *  excludeScalar: ['Json', 'DateTime']
   * }
   */
  excludeScalar?: ('Json' | 'Decimal' | 'BigInt' | 'DateTime' | 'Bytes')[];
}
